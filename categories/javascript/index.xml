<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Mia&#39;s Blog Posts</title>
    <link>https://Mia-zhao.github.io/blog/categories/javascript/</link>
    <description>Recent content in Javascript on Mia&#39;s Blog Posts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Wed, 12 Aug 2020 07:06:00 +0000</lastBuildDate>
    
	<atom:link href="https://Mia-zhao.github.io/blog/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>jQuery 的功能</title>
      <link>https://Mia-zhao.github.io/blog/jquery-%E7%9A%84%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Wed, 12 Aug 2020 07:06:00 +0000</pubDate>
      
      <guid>https://Mia-zhao.github.io/blog/jquery-%E7%9A%84%E5%8A%9F%E8%83%BD/</guid>
      <description>这篇博文主要为了个人学习目的。
jQuery 是一个功能丰富的JavaScript 工具库，提供操作HTML、事件处理等API。以下简述jQuery 操作元素的功能。
1 获取元素 jQuery 主要用法在于返回操作元素的API，然后通过API 操作来实现操控元素的目的。jQuery 库通过window 对象的属性jQuery给开发者以使用jQuery 的函数和属性等，$是jQuery的别名。例如，
$( document ) // 获取整个文档$( &amp;quot;*&amp;quot; ) // 获取所有元素$( &amp;quot;#elementID&amp;quot; ) // 获取ID为&#39;elementID&#39;的元素jQuery 在获取元素时接受CSS选择器作为参数以及jQuery 特有的选择器。所有合法的jQuery 选择器在jQuery 选择器文档中提到。
在使用$获取到某些元素后还可以用继续用find获取其子元素。例如，
$( &amp;quot;#elementID&amp;quot; ).find( &amp;quot;div&amp;quot; ) // 在获取的elementID元素的子元素中获取div元素值得注意的是find不仅可以接受选择器为参数还接受元素或jQuery对象为参数，例如，
const allListElements = $( &amp;quot;li&amp;quot; )$( &amp;quot;div&amp;quot; ).find( allListElements )2 链式操作 jQuery 的函数返回jQuery 对象使得链式操作成为可能。链式操作使代码更简洁，在通过选择器获取元素时只需获取一次就能实现多重操作。例如，
$( &amp;quot;div&amp;quot; ).addClass( &amp;quot;new-class&amp;quot; ).css( &amp;quot;color&amp;quot;, &amp;quot;red&amp;quot; )// 给所有div元素加一个类&amp;quot;new-class&amp;quot;并把样式颜色设置为&amp;quot;red&amp;quot;这样的操作可以多重进行下去，代码实现的功能也一目了然。如果要获取子元素或者返回子元素上一层，可以用find和end。
3 创建元素 用append可以实现创建元素的目的，将特定内容插入到匹配元素的最后作为最后一个子元素。用prepend插入作为第一个子元素。appendTo实现与append相同的功能，只是语法不同，a.</description>
    </item>
    
    <item>
      <title>JavaScript 函数的执行时机</title>
      <link>https://Mia-zhao.github.io/blog/javascript-%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</link>
      <pubDate>Sun, 09 Aug 2020 13:14:00 +0000</pubDate>
      
      <guid>https://Mia-zhao.github.io/blog/javascript-%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</guid>
      <description>这篇博文主要为了个人学习目的。
首先考虑如下代码:
let i = 0for(i = 0; i&amp;lt;6; i++){setTimeout(()=&amp;gt;{console.log(i)},0)}执行这个代码块打印6个6, 其原因在于setTimeout()函数的调用是在主线程执行完其他任务之后。依照MDN setTimeout documentation中给出的范例:
function foo() {console.log(&#39;foo has been called&#39;);}setTimeout(foo, 0);console.log(&#39;After setTimeout&#39;);/*Result:After setTimeoutfoo has been called*/同理, 在for循环例子当中, setTimeout()函数被放置在待执行队列中。当for循环结束时, 共有6个setTimeout()待执行, 此时变量i的值为6。也就是说, setTimeout()执行时, 函数作用域的i是6, 因此代码块会打印出6个6。
若要代码块打印出0、1、2、3、4、5则需要对原代码做出如下改动:
for(let i = 0; i&amp;lt;6; i++){setTimeout(()=&amp;gt;{console.log(i)},0)}除了以上方法外, 还可以:
let i = 0for(i = 0; i&amp;lt;6; i++){let j = isetTimeout(()=&amp;gt;{console.</description>
    </item>
    
    <item>
      <title>JavaScript 对象基本用法</title>
      <link>https://Mia-zhao.github.io/blog/javascript-%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link>
      <pubDate>Sat, 08 Aug 2020 14:05:00 +0000</pubDate>
      
      <guid>https://Mia-zhao.github.io/blog/javascript-%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid>
      <description>这篇博文主要为了个人学习目的。
最新 ECMAScript 定义了9种类型:
 包括6种原始数据类型  undefined Boolean Number String BigInt Symbol   null Object Function 并非数据结构, 属于Object, 但是有便利的 typeof instance === &amp;quot;function&amp;quot;  注意MDN中英文翻译不太一致:
 Data Structures 数据结构  此篇总结对象 (Object) 的基本用法, 包括对象的声明, 删除、查看、修改或增加对象属性。
声明对象 以下是两种声明对象的方式:
let object1 = {};let object2 = new Object();对象属性 一个对象可以有多个属性, 属性名和属性值构成的一个键值对依附于所属对象。对象的属性可以被删除、查看、修改或增加。
删除 对于已有对象object
let object = {&#39;name&#39;: &#39;myName&#39;, &#39;value&#39;: 100};删除属性value有以下方式 (注意区别):
object.value = undefined; // object[&#39;value&#39;] = undefined;// result: {name: &amp;quot;myName&amp;quot;, value: undefined}delete object.</description>
    </item>
    
    <item>
      <title> JavaScript 的基本语法总结</title>
      <link>https://Mia-zhao.github.io/blog/javascript-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 08 Aug 2020 04:40:00 +0000</pubDate>
      
      <guid>https://Mia-zhao.github.io/blog/javascript-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</guid>
      <description>这篇博文主要为了个人学习目的。推荐阅读：
 网道JavaScript教程 《你不知道的JavaScript（上卷）》  表达式 (expression) 和语句 (statement) 总结来说，表达式是能得到返回值的式子，语句是完成某项任务的操作。以如下为例：
var a = 1 + 4;这是一个赋值语句，其中1 + 4是一个表达式。使用表达式的目的是为了得到它的值，表达式可以是运用运算符 operator (如逻辑运算符，算术运算符，位运算符等等) 的算式，也可以是运用函数的式子 (如add(1,2), console.log()等)。
值得注意的是 JavaScript 中的 Automatic Semicolon Insertion (ASI)。在语句末尾, 分号 (semicolon) 不是强制性的, JavaScript 会自动补全分号, 然而在某些情况下, 自动补全分号会引入意外。例如:
/* 例子一 */return{// some code};/* 例子一被解析为return;{// some code};*//* 例子二 */i++;/* 例子二被解析为i;++;*/标识符 (identifier) 标识符用来标识变量名, 函数或属性名。标识符是大小写敏感的并且可以包含:</description>
    </item>
    
    <item>
      <title>JavaScript 的诞生</title>
      <link>https://Mia-zhao.github.io/blog/javascript-%E7%9A%84%E8%AF%9E%E7%94%9F/</link>
      <pubDate>Fri, 07 Aug 2020 06:12:00 +0000</pubDate>
      
      <guid>https://Mia-zhao.github.io/blog/javascript-%E7%9A%84%E8%AF%9E%E7%94%9F/</guid>
      <description>这篇博文主要为了个人学习目的。此篇总结了JavaScript 历史, Javascript 诞生以及10个设计缺陷。
参考：
 维基百科 JavaScript 阮一峰 《Javascript诞生记》 阮一峰 《Javascript的10个设计缺陷》  JavaScript 历史 1995年, 占据大部分浏览器市场的NetScape Communications公司招聘了Brendan Eich, 目标是将Scheme语言嵌入该公司的浏览器中。后来NetScape决定发明一种与Java搭配的辅助脚本语言。Eich花了十天设计出JavaScript原型。
JavaScript的推出大获成功, 微软随后为IE3推出JScript来同NetScape竞争。这一时期, JavaScript的标准尚未确立。1996年11月, NetScape向ECMA提交语言标准。1997年, 以JavaScript为基础制定的ECMAScript标准规范ECMA-262推出。JavaScript成为ECMAScript最著名的实现之一。
JavaScript 的诞生 NetScape在做网页脚本语言选择的决定时, 受到Sun公司推出Java的影响, 两家公司达成合作。允许Java程序以Applet形式在浏览器中运行, 网页脚本语言JavaScript须与Java相似。
Eich只花了十天时间设计JavaScript, 导致语言的一些细节不够严谨。Eich的设计思路如下：
 借鉴C语言的基本语法 借鉴Java语言的数据类型和内存管理 借鉴Scheme语言, 将函数提升为first class地位 借鉴Self语言, 使用基于原型的继承机制  因此, JavaScript是函数式编程和面向对象编程的混合。
JavaScript 的10个设计缺陷  不适合开发大型程序  JavaScript没有namespace, 难以模块化 缺乏如何将代码分布在多个文件的规范   JavaScript标准函数库很小 null 和 undefined 容易混淆 全局变量难以控制  全局变量在所有模块可见 任何函数内部都可以生成全局变量   自动插入行尾分号  解释器不报错, 自动加分号    function(){return{i=1};}/*解析为function(){return;{i=1};}*/加号运算符既可表示数字运算也可以表示字符相连, 加剧运算复杂性 NaN (Not a Number) 特性不利于简化程序 难以区分数组和对象 == 和 === 判断结果不符合直觉 基本数据类型和其相应的对象类型区别不大却造成很大混淆  alert( typeof 1234); // numberalert( typeof new Number(1234)); // object尽管JavaScript有设计缺陷, 在第三方函数库的辅助下配合良好编程习惯, 大部分缺陷都能被回避。</description>
    </item>
    
  </channel>
</rss>