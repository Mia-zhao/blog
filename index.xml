<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mia&#39;s Blog Posts</title>
    <link>https://Mia-zhao.github.io/blog/</link>
    <description>Recent content on Mia&#39;s Blog Posts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Wed, 12 Aug 2020 07:06:00 +0000</lastBuildDate>
    
	<atom:link href="https://Mia-zhao.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>jQuery 的功能</title>
      <link>https://Mia-zhao.github.io/blog/posts/jquery-%E7%9A%84%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Wed, 12 Aug 2020 07:06:00 +0000</pubDate>
      
      <guid>https://Mia-zhao.github.io/blog/posts/jquery-%E7%9A%84%E5%8A%9F%E8%83%BD/</guid>
      <description>这篇博文主要为了个人学习目的。
jQuery 是一个功能丰富的JavaScript 工具库，提供操作HTML、事件处理等API。以下简述jQuery 操作元素的功能。
1 获取元素 jQuery 主要用法在于返回操作元素的API，然后通过API 操作来实现操控元素的目的。jQuery 库通过window 对象的属性jQuery给开发者以使用jQuery 的函数和属性等，$是jQuery的别名。例如，
$( document ) // 获取整个文档$( &amp;quot;*&amp;quot; ) // 获取所有元素$( &amp;quot;#elementID&amp;quot; ) // 获取ID为&#39;elementID&#39;的元素jQuery 在获取元素时接受CSS选择器作为参数以及jQuery 特有的选择器。所有合法的jQuery 选择器在jQuery 选择器文档中提到。
在使用$获取到某些元素后还可以用继续用find获取其子元素。例如，
$( &amp;quot;#elementID&amp;quot; ).find( &amp;quot;div&amp;quot; ) // 在获取的elementID元素的子元素中获取div元素值得注意的是find不仅可以接受选择器为参数还接受元素或jQuery对象为参数，例如，
const allListElements = $( &amp;quot;li&amp;quot; )$( &amp;quot;div&amp;quot; ).find( allListElements )2 链式操作 jQuery 的函数返回jQuery 对象使得链式操作成为可能。链式操作使代码更简洁，在通过选择器获取元素时只需获取一次就能实现多重操作。例如，
$( &amp;quot;div&amp;quot; ).addClass( &amp;quot;new-class&amp;quot; ).css( &amp;quot;color&amp;quot;, &amp;quot;red&amp;quot; )// 给所有div元素加一个类&amp;quot;new-class&amp;quot;并把样式颜色设置为&amp;quot;red&amp;quot;这样的操作可以多重进行下去，代码实现的功能也一目了然。如果要获取子元素或者返回子元素上一层，可以用find和end。
3 创建元素 用append可以实现创建元素的目的，将特定内容插入到匹配元素的最后作为最后一个子元素。用prepend插入作为第一个子元素。appendTo实现与append相同的功能，只是语法不同，a.</description>
    </item>
    
    <item>
      <title>JavaScript 函数的执行时机</title>
      <link>https://Mia-zhao.github.io/blog/posts/javascript-%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</link>
      <pubDate>Sun, 09 Aug 2020 13:14:00 +0000</pubDate>
      
      <guid>https://Mia-zhao.github.io/blog/posts/javascript-%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</guid>
      <description>这篇博文主要为了个人学习目的。
首先考虑如下代码:
let i = 0for(i = 0; i&amp;lt;6; i++){setTimeout(()=&amp;gt;{console.log(i)},0)}执行这个代码块打印6个6, 其原因在于setTimeout()函数的调用是在主线程执行完其他任务之后。依照MDN setTimeout documentation中给出的范例:
function foo() {console.log(&#39;foo has been called&#39;);}setTimeout(foo, 0);console.log(&#39;After setTimeout&#39;);/*Result:After setTimeoutfoo has been called*/同理, 在for循环例子当中, setTimeout()函数被放置在待执行队列中。当for循环结束时, 共有6个setTimeout()待执行, 此时变量i的值为6。也就是说, setTimeout()执行时, 函数作用域的i是6, 因此代码块会打印出6个6。
若要代码块打印出0、1、2、3、4、5则需要对原代码做出如下改动:
for(let i = 0; i&amp;lt;6; i++){setTimeout(()=&amp;gt;{console.log(i)},0)}除了以上方法外, 还可以:
let i = 0for(i = 0; i&amp;lt;6; i++){let j = isetTimeout(()=&amp;gt;{console.</description>
    </item>
    
    <item>
      <title>JavaScript 对象基本用法</title>
      <link>https://Mia-zhao.github.io/blog/posts/javascript-%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link>
      <pubDate>Sat, 08 Aug 2020 14:05:00 +0000</pubDate>
      
      <guid>https://Mia-zhao.github.io/blog/posts/javascript-%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid>
      <description>这篇博文主要为了个人学习目的。
最新 ECMAScript 定义了9种类型:
 包括6种原始数据类型  undefined Boolean Number String BigInt Symbol   null Object Function 并非数据结构, 属于Object, 但是有便利的 typeof instance === &amp;quot;function&amp;quot;  注意MDN中英文翻译不太一致:
 Data Structures 数据结构  此篇总结对象 (Object) 的基本用法, 包括对象的声明, 删除、查看、修改或增加对象属性。
声明对象 以下是两种声明对象的方式:
let object1 = {};let object2 = new Object();对象属性 一个对象可以有多个属性, 属性名和属性值构成的一个键值对依附于所属对象。对象的属性可以被删除、查看、修改或增加。
删除 对于已有对象object
let object = {&#39;name&#39;: &#39;myName&#39;, &#39;value&#39;: 100};删除属性value有以下方式 (注意区别):
object.value = undefined; // object[&#39;value&#39;] = undefined;// result: {name: &amp;quot;myName&amp;quot;, value: undefined}delete object.</description>
    </item>
    
    <item>
      <title> JavaScript 的基本语法总结</title>
      <link>https://Mia-zhao.github.io/blog/posts/-javascript-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 08 Aug 2020 04:40:00 +0000</pubDate>
      
      <guid>https://Mia-zhao.github.io/blog/posts/-javascript-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</guid>
      <description>这篇博文主要为了个人学习目的。推荐阅读：
 网道JavaScript教程 《你不知道的JavaScript（上卷）》  表达式 (expression) 和语句 (statement) 总结来说，表达式是能得到返回值的式子，语句是完成某项任务的操作。以如下为例：
var a = 1 + 4;这是一个赋值语句，其中1 + 4是一个表达式。使用表达式的目的是为了得到它的值，表达式可以是运用运算符 operator (如逻辑运算符，算术运算符，位运算符等等) 的算式，也可以是运用函数的式子 (如add(1,2), console.log()等)。
值得注意的是 JavaScript 中的 Automatic Semicolon Insertion (ASI)。在语句末尾, 分号 (semicolon) 不是强制性的, JavaScript 会自动补全分号, 然而在某些情况下, 自动补全分号会引入意外。例如:
/* 例子一 */return{// some code};/* 例子一被解析为return;{// some code};*//* 例子二 */i++;/* 例子二被解析为i;++;*/标识符 (identifier) 标识符用来标识变量名, 函数或属性名。标识符是大小写敏感的并且可以包含:</description>
    </item>
    
    <item>
      <title>JavaScript 的诞生</title>
      <link>https://Mia-zhao.github.io/blog/posts/javascript-%E7%9A%84%E8%AF%9E%E7%94%9F/</link>
      <pubDate>Fri, 07 Aug 2020 06:12:00 +0000</pubDate>
      
      <guid>https://Mia-zhao.github.io/blog/posts/javascript-%E7%9A%84%E8%AF%9E%E7%94%9F/</guid>
      <description>这篇博文主要为了个人学习目的。此篇总结了JavaScript 历史, Javascript 诞生以及10个设计缺陷。
参考：
 维基百科 JavaScript 阮一峰 《Javascript诞生记》 阮一峰 《Javascript的10个设计缺陷》  JavaScript 历史 1995年, 占据大部分浏览器市场的NetScape Communications公司招聘了Brendan Eich, 目标是将Scheme语言嵌入该公司的浏览器中。后来NetScape决定发明一种与Java搭配的辅助脚本语言。Eich花了十天设计出JavaScript原型。
JavaScript的推出大获成功, 微软随后为IE3推出JScript来同NetScape竞争。这一时期, JavaScript的标准尚未确立。1996年11月, NetScape向ECMA提交语言标准。1997年, 以JavaScript为基础制定的ECMAScript标准规范ECMA-262推出。JavaScript成为ECMAScript最著名的实现之一。
JavaScript 的诞生 NetScape在做网页脚本语言选择的决定时, 受到Sun公司推出Java的影响, 两家公司达成合作。允许Java程序以Applet形式在浏览器中运行, 网页脚本语言JavaScript须与Java相似。
Eich只花了十天时间设计JavaScript, 导致语言的一些细节不够严谨。Eich的设计思路如下：
 借鉴C语言的基本语法 借鉴Java语言的数据类型和内存管理 借鉴Scheme语言, 将函数提升为first class地位 借鉴Self语言, 使用基于原型的继承机制  因此, JavaScript是函数式编程和面向对象编程的混合。
JavaScript 的10个设计缺陷  不适合开发大型程序  JavaScript没有namespace, 难以模块化 缺乏如何将代码分布在多个文件的规范   JavaScript标准函数库很小 null 和 undefined 容易混淆 全局变量难以控制  全局变量在所有模块可见 任何函数内部都可以生成全局变量   自动插入行尾分号  解释器不报错, 自动加分号    function(){return{i=1};}/*解析为function(){return;{i=1};}*/加号运算符既可表示数字运算也可以表示字符相连, 加剧运算复杂性 NaN (Not a Number) 特性不利于简化程序 难以区分数组和对象 == 和 === 判断结果不符合直觉 基本数据类型和其相应的对象类型区别不大却造成很大混淆  alert( typeof 1234); // numberalert( typeof new Number(1234)); // object尽管JavaScript有设计缺陷, 在第三方函数库的辅助下配合良好编程习惯, 大部分缺陷都能被回避。</description>
    </item>
    
    <item>
      <title>浅析 URL</title>
      <link>https://Mia-zhao.github.io/blog/posts/%E6%B5%85%E6%9E%90-url/</link>
      <pubDate>Thu, 06 Aug 2020 10:00:00 +0000</pubDate>
      
      <guid>https://Mia-zhao.github.io/blog/posts/%E6%B5%85%E6%9E%90-url/</guid>
      <description>这篇博文主要为了个人学习目的。此篇内容包括URL，DNS，IP以及域名。
URL URL (Uniform Resource Locator) 指向网络上的独特资源，URL由以下部分构成：
 protocol 协议: 表明浏览器须使用的数据交换协议, 通常是HTTP或HTTPS domain name 域名: 表明请求的服务器，也可以直接使用对应的IP port 端口: 访问服务器的服务端口  HTTP标准端口: 80 HTTPS标准端口: 443   path 路径: 服务器上访问的资源路径 extra parameters 其他参数: 参数是用&amp;amp;分隔的键值对  例如：http://www.baidu.com/s?wd=hi中wd=hi是搜索请求的参数   anchor 锚点: 指示浏览器显示锚点的位置, 用#anchorInDoc表示  #后的内容不会发送到服务器    https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL#Summary在这个例子中, protocol是HTTPS, domain name是developer.mozilla.org, port 443省略, path是en-US/docs/Learn/Common_questions/What_is_a_URL, anchor是Summary。这个URL会在浏览器中定位资源中的Summary。
DNS DNS (Domain Name System) 提供域名对应的IP。用户在客户端输入URL, DNS提供URL中域名对应的服务器IP, 客户端向服务器IP发送请求。
nslookup 是一个命令行工具用来解析DNS域名查找。nslookup a-domain-name命令输出对域名a-domain-name的解析。例如：
&amp;gt; nslookup google.comServer: your-routerAddress: 192.</description>
    </item>
    
    <item>
      <title>CSS 知识总结2</title>
      <link>https://Mia-zhao.github.io/blog/posts/css-%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%932/</link>
      <pubDate>Thu, 06 Aug 2020 08:59:00 +0000</pubDate>
      
      <guid>https://Mia-zhao.github.io/blog/posts/css-%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%932/</guid>
      <description>这篇博文主要为了个人学习目的，内容包括CSS定位，层叠上下文，浏览器渲染原理以及动画 (transition, animation)。
1 定位 文档流和盒模型讨论的是二维平面的布局，定位讨论的是垂直于平面的z-axis布局。从上到下（或者人眼俯视屏幕的方向）分别是：
 内联子元素 浮动元素 块级子元素 边框 背景  position的默认值是static, 其余值有：
 relative: 配合absolute/z-index使用 absolute: 相对于祖先中最近一个定位元素（非static）定位  有些浏览器若没有top left会错乱 注意善用百分值和负margin定位   fixed: 相对于viewport  特殊属性除外（transform）   sticky: 不常用  2 层叠上下文 元素在z轴的顺序由z-index影响，然而不是由z-index的值决定，应在层叠上下文(stacking context)中考虑。 以下是常见层叠上下文的形成：
 根元素html position为absolute或relative并且z-index值不为auto opacity小于1 position为fixed或sticky transform不为none  注：参考 stacking context
考虑层叠上下文时注意：
 每个层叠上下文是新的context 处在同一context才能比较  3 浏览器渲染原理 3.1 渲染步骤 浏览器渲染分为六个步骤：
 构建DOM 构建CCSOM 合并成渲染树(render-tree) layout paint composite  注：参考 https://csstriggers.com了解CSS特性触发的浏览器渲染过程</description>
    </item>
    
    <item>
      <title>CSS 知识总结1</title>
      <link>https://Mia-zhao.github.io/blog/posts/css-%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%931/</link>
      <pubDate>Thu, 06 Aug 2020 07:40:00 +0000</pubDate>
      
      <guid>https://Mia-zhao.github.io/blog/posts/css-%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%931/</guid>
      <description>这篇博文主要为了个人学习目的，内容包括CSS基础知识，重要概念（文档流normal flow和盒模型box model）以及布局 (float, flex, grid) 。
1 基础知识 CSS由Håkon Wium Lie 发明，CCS2.1是目前使用最广泛的版本，CSS3开始分模块更新版本。caniuse.com可以用来参考不同浏览器对CSS特性的支持。
1.1 语法  选择器 { 属性名: 属性值; /*注释*/ }， 举例：  img {max-width: 100%;} @语法  @charset &amp;quot;UTF-8&amp;quot;;@import url(example.css);@media (min-width: 100px) and (max-width: 200px) {}1.2 资料  MDN CCS tricks 张鑫旭的博客  2 重要概念 2.1 文档流 normal flow 在默认布局下，文档流可以是左到右或是上到下。例如，span元素是默认合并的(inline), div元素是默认占一行不合并的(block): 除此以外，inline元素不能指定width/height, 元素的高度由line-height间接确定。block元素可以指定width/height,元素高度由内部文档流元素决定。
注：文档流元素是指处于文档流的元素，position: [absolute|fixed] 以及 float会使元素脱离文档流。
除了inline和block, 还可以通过display: inline-block;设置元素为inline-block。inline-block兼顾inline和block两者的特点，宽度流动与inline一致，高度流动与block一致，可以通过width/height设置宽高。
注意：
 block默认width的值是auto而非100% 不要用设置width为100% inline元素不能包含block元素  2.</description>
    </item>
    
    <item>
      <title>HTML Practice</title>
      <link>https://Mia-zhao.github.io/blog/posts/html-practice/</link>
      <pubDate>Tue, 04 Aug 2020 13:00:00 +0000</pubDate>
      
      <guid>https://Mia-zhao.github.io/blog/posts/html-practice/</guid>
      <description>这篇博文主要为了个人学习目的。
HTML实践练习作业
Tips meta viewport &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&amp;quot;&amp;gt;
VSCode快捷键（快速生成list等）  选中多行内容 ctrl + shift + p emmet wrap ul&amp;gt;li*  图片大小兼容手机 &amp;lt;style&amp;gt;img {max-width: 100%;}&amp;lt;/style&amp;gt;Chrome远程调试 Remote Debugging
 Enable USB debugging on phone Navigate to chrome://inspect/#devices on PC  </description>
    </item>
    
    <item>
      <title>HTML常用标签</title>
      <link>https://Mia-zhao.github.io/blog/posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Mon, 03 Aug 2020 13:00:00 +0000</pubDate>
      
      <guid>https://Mia-zhao.github.io/blog/posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</guid>
      <description>这篇博文主要为了个人学习目的。此篇总结了HTML常用标签:
 a img table form  注意：应用网址浏览方式打开html文件，例如：利用工具http-server,parcel,etc.
1. &amp;lt;a&amp;gt;标签 作用 又称anchor (锚)，用于创建超链接。按功能分，可以通向：
 同页面的其他元素 其他网页 文件 JavaScript 电子邮件/电话  以上功能通过元素的href属性达成，例如：
&amp;lt;!-- example 1 链接通向同页面的id=&amp;quot;hey&amp;quot;的p元素 --&amp;gt;&amp;lt;p id=&amp;quot;hey&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#hey&amp;quot;&amp;gt;example 1&amp;lt;/a&amp;gt;&amp;lt;!-- example 2 链接通向无协议的google.com, https://google.com或者http://google.com也是合法值--&amp;gt;&amp;lt;a href=&amp;quot;//google.com&amp;quot;&amp;gt;example 2&amp;lt;/a&amp;gt;&amp;lt;!-- example 3 链接通向文件路径, &amp;quot;subdir1/subdir2&amp;quot;等效，也可以是&amp;quot;index.html&amp;quot;, &amp;quot;./index.html&amp;quot;等效 --&amp;gt;&amp;lt;a href=&amp;quot;/subdir1/subdir2&amp;quot;&amp;gt;example 3&amp;lt;/a&amp;gt;&amp;lt;!-- example 4 链接运行javascript代码&amp;lt;code&amp;gt;部分，如果是空则什么都不做 (不需要刷新的时候用) --&amp;gt;&amp;lt;a href=&amp;quot;javascript:&amp;lt;code&amp;gt;;&amp;quot;&amp;gt;example 4&amp;lt;/a&amp;gt;&amp;lt;!-- example 5 链接发送邮件，&amp;quot;tel:110&amp;quot;则拨电话 --&amp;gt;&amp;lt;a href=&amp;quot;mailto:abc@example.com&amp;quot;&amp;gt;example 5&amp;lt;/a&amp;gt;target属性 默认值是_self, 表明链接在&amp;lt;a&amp;gt;所在窗口打开。其他值包括：
 _blank: 在新窗口打开，在新tab或是window打开取决于浏览器设置 _parent: 在&amp;lt;a&amp;gt;的父级元素环境打开，若无父级元素，效果等同_self _top: 在&amp;lt;a&amp;gt;的最高祖先级元素环境打开，若无，则等同_self &amp;quot;some_value&amp;quot;: 任意String。若&amp;quot;some_value&amp;quot;窗口已存在，则在其窗口打开；否则新建一个&amp;quot;some_value&amp;quot;窗口并在此打开链接  download属性 指示浏览器下载，可以有值或者没有值：</description>
    </item>
    
    <item>
      <title>HTML入门笔记1</title>
      <link>https://Mia-zhao.github.io/blog/posts/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</link>
      <pubDate>Sun, 02 Aug 2020 22:08:23 +0800</pubDate>
      
      <guid>https://Mia-zhao.github.io/blog/posts/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</guid>
      <description>这篇博文主要为了个人学习目的。主要总结了关于HTML的一些基础知识，包括HTML的发明，起手式，常用章节标签，全局属性，常用内容标签等。
HTML的起源 HTML的发明者是Tim Berners-Lee。HTML作为W3(World Wide Web)三大技术构成之一，被用来呈现文本，与其他两项技术(分别是URI和HTTP)一起使网页的分享互联成为可能。
HTML的起手 HTML并非唯一的Markup Language，为了确保浏览器照最佳规范进行渲染，HTML文本需要在第一行标明HTML的文件类型：
&amp;lt;!DOCTYPE html&amp;gt; 虽然MDN的补充阅读提到这行标注是case insensitive，MDN的官方HTML指南写到&amp;lt;!DOCTYPE html&amp;gt;应该被使用。
另外，html标签的lang属性被用来设置文本语言。例如，
&amp;lt;html lang=&amp;quot;en-US&amp;quot;&amp;gt; &amp;lt;!-- 表示英文(美国) --&amp;gt; &amp;lt;html lang=&amp;quot;zh-CN&amp;quot;&amp;gt; &amp;lt;!-- 表示中文(中国) --&amp;gt; 此外，字符编码方式是必须的：
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt; 值得注意的是编码方式应在文本head块以内，并且要尽可能靠前。 最后，为了让内容与移动设备更兼容，需加上meta标签的viewport：
&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width&amp;quot;&amp;gt; 在Visual Studio Code里，有一个快速方式开始HTML的模范，新建一个html文档并在第一行写下!，出现Emmet Abbreviation后回车： 以下是自动生成的HTML的起手：
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt; &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 常用章节标签    标签 含义     h1~h6 标题，h1~h6有不同默认字体格式   section 章节   p 段落   header 头部   footer 脚部   main 主要内容   aside 次要内容   div 划分    以下是一个例子： 全局属性  class  用于给标签定义class 一个标签可以有多个class 多个标签可以是同一个class *，.</description>
    </item>
    
  </channel>
</rss>